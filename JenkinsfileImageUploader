pipeline {
    agent any

    environment {
        MAIN_PATH = './'
    }

    stages {
        stage('Get Containers') {
            steps {
                script {
                    def runningApacheContainerID = sh(
                        script: 'docker ps --filter "status=running" --filter "ancestor=php:8.2-apache" --format "{{.ID}}"',
                        returnStdout: true
                    ).trim()

                    def runningMyAdminContainerID = sh(
                        script: 'docker ps --filter "status=running" --filter "ancestor=phpmyadmin/phpmyadmin" --format "{{.ID}}"',
                        returnStdout: true
                    ).trim()

                    def runningMySQLContainerID = sh(
                        script: 'docker ps --filter "status=running" --filter "ancestor=mysql:8.1.0" --format "{{.ID}}"',
                        returnStdout: true
                    ).trim()

                    // Verifica si se encontró algún contenedor con la imagen específica
                    if (runningApacheContainerID && runningMyAdminContainerID && runningMySQLContainerID) {
                        echo "Running container ID for Apache: ${runningApacheContainerID}"
                        echo "Running container ID for PHP MyAdmin: ${runningMyAdminContainerID}"
                        echo "Running container ID for MySQL: ${runningMySQLContainerID}"
                        
                        // Guarda el ID del contenedor en una variable de entorno para su uso posterior
                        env.APACHE_CONTAINER_ID = runningApacheContainerID
                        env.MYADMIN_CONTAINER_ID = runningMyAdminContainerID
                        env.MYSQL_CONTAINER_ID = runningMySQLContainerID
                    } else {
                        error("No running container found for any of the Images")
                    }
                }
            }
        }

        stage('Build Images') {
            steps {
                script {
                    // Crear una imagen de Docker a partir del contenedor Apache
                    sh "docker commit ${env.APACHE_CONTAINER_ID} lamp-apache-image:latest "
                    echo "Created Docker image 'lamp-apache-image:latest' from container ID ${env.APACHE_CONTAINER_ID}"

                    // Crear una imagen de Docker a partir del contenedor phpMyAdmin
                    sh "docker commit ${env.MYADMIN_CONTAINER_ID} lamp-myadmin-image:latest"
                    echo "Created Docker image 'lamp-myadmin-image:latest' from container ID ${env.MYADMIN_CONTAINER_ID}"

                    // Crear una imagen de Docker a partir del contenedor MySQL
                    sh "docker commit ${env.MYSQL_CONTAINER_ID} lamp-mysql-image:latest"
                    echo "Created Docker image 'lamp-mysql-image:latest' from container ID ${env.MYSQL_CONTAINER_ID}"

                    sh 'docker image prune -f'
                    echo "Deleted all unused Docker images"
                }
            }
        }

        stage('Login to DockerHub') {
            steps {
                script {
                    // Usa withCredentials para obtener las credenciales de Jenkins
                    withCredentials([usernamePassword(credentialsId: '9a911e1f-e132-4d13-89ea-4388b1d705e4', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                        // Utiliza las credenciales para iniciar sesión en Docker Hub
                        sh "echo ${DOCKER_PASSWORD} | docker login -u ${DOCKER_USERNAME} --password-stdin"
                    }
                }
            }
        }

        stage('Upload Images to DockerHub') {
            steps {
                script {
                    def dockerHubRepo = 'santiagovera'

                    // Etiquetar las imágenes locales con el repositorio de Docker Hub
                    sh "docker tag lamp-apache-image:latest ${dockerHubRepo}/lamp-apache-image:latest"
                    sh "docker tag lamp-myadmin-image:latest ${dockerHubRepo}/lamp-myadmin-image:latest"
                    sh "docker tag lamp-mysql-image:latest ${dockerHubRepo}/lamp-mysql-image:latest"

                    // Subir las imágenes a Docker Hub
                    sh "docker push ${dockerHubRepo}/lamp-apache-image:latest"
                    sh "docker push ${dockerHubRepo}/lamp-myadmin-image:latest"
                    sh "docker push ${dockerHubRepo}/lamp-mysql-image:latest"
                }
            }
        }
    }
}